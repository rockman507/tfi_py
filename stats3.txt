Timer unit: 4.1058e-07 s

File: calc_phase.py
Function: calc_phase at line 5
Total time: 0.0843648 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def calc_phase (data):
     7                                           
     8                                               # Setup 9-pixels
     9         1           45     45.0      0.0      I1 = data[:-2,:-2] 
    10         1           10     10.0      0.0      I2 = data[:-2,1:-1] 
    11         1            8      8.0      0.0      I3 = data[:-2,2:] 
    12         1            8      8.0      0.0      I4 = data[1:-1,:-2] 
    13         1            8      8.0      0.0      I5 = data[1:-1,1:-1] 
    14         1            8      8.0      0.0      I6 = data[1:-1,2:] 
    15         1            8      8.0      0.0      I7 = data[2:,:-2] 
    16         1            8      8.0      0.0      I8 = data[2:,1:-1] 
    17         1            7      7.0      0.0      I9 = data[2:,2:]
    18                                           
    19                                               # Intensity and modulation stolen from Jason by Jason
    20         1        28257  28257.0     13.8      intensity = I5 + 0.5*(I2+I4+I6+I8) + 0.25*(I1+I3+I5+I7+I9)
    21                                               
    22                                               #quality = np.array(modulation > 0.0, 'b')
    23                                               
    24         1        11696  11696.0      5.7      num = 2*(I2+I8-I4-I6)+.0001 #addition to avoid division by zero
    25         1        15389  15389.0      7.5      den = 4*I5-I1-I3-I7-I9+.0001 #addition to avoid division by zero
    26                                           
    27         1        22759  22759.0     11.1      modulation = np.sqrt(num**2+den**2)/(2*intensity+.0001)
    28         1         3882   3882.0      1.9      modulation[modulation>1]=0
    29                                           
    30                                               # Create two masks when atan and acot need to be applied
    31         1           55     55.0      0.0      a = np.zeros(modulation.shape, 'b')
    32         1          129    129.0      0.1      a[::2,::2]=1
    33         1          105    105.0      0.1      a[1::2,1::2]=1
    34         1          709    709.0      0.3      a_mask = np.array(a,'bool')
    35         1         1702   1702.0      0.8      b = np.array(-a+1)
    36         1        25594  25594.0     12.5      a = a*np.arctan(num/den)
    37         1        25110  25110.0     12.2      b = b*np.arctan(den/num) #acot
    38         1         3149   3149.0      1.5      phase = np.array((a+b),'f')
    39                                           
    40                                               # Fix me some phase offsets
    41         1        13878  13878.0      6.8      phase[(~a_mask) & (phase<0) & (num>0)] += np.pi
    42         1        13132  13132.0      6.4      phase[(a_mask) & (phase<0) & (den>0)] += np.pi
    43         1        16804  16804.0      8.2      phase[(phase>0) & (phase<np.pi/2) & (num>0)] -= np.pi
    44         1          463    463.0      0.2      phase[:,::2] += np.pi
    45         1        11351  11351.0      5.5      phase[phase>=np.pi] -= 2*np.pi
    46                                           
    47                                               # Map phase [-2pi:2pi] -> [0,255] 
    48         1         9016   9016.0      4.4      phase = (phase/(2*np.pi)+0.5)*255
    49         1         2178   2178.0      1.1      phase = np.array(phase,'B')
    50                                           
    51         1            9      9.0      0.0      return phase, modulation, intensity

