Timer unit: 4.1058e-07 s

File: mask.py
Function: get_mask at line 5
Total time: 0.230305 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           @profile
     6                                           def get_mask(path, border=0, size=True):
     7                                           
     8                                               #Get mask shape
     9         1         3093   3093.0      0.6      f = File(path, 'r')
    10         1          789    789.0      0.1      sub = f.get(r'measurement0/maskshapes/Detector')
    11         1          835    835.0      0.1      sub2 = f.get(r'measurement0/frames/frame_full/data')
    12         1           84     84.0      0.0      X,Y = sub2.shape
    13         1            9      9.0      0.0      X -= 2
    14         1            7      7.0      0.0      Y -= 2
    15         1          607    607.0      0.1      temp = sub.attrs.get('shape1')
    16         1         9412   9412.0      1.7      temp = re.split('[| ,]', temp)
    17         1          803    803.0      0.1      f.close()
    18                                           
    19         1           27     27.0      0.0      left = int(float(temp[1]))
    20         1           11     11.0      0.0      top = int(float(temp[3]))
    21         1           10     10.0      0.0      width = int(float(temp[5]))
    22         1            7      7.0      0.0      arr_size = temp[-1]
    23                                           
    24                                               # If array is quarter size, expand to same size array as phase
    25         1           12     12.0      0.0      if float(arr_size) < 750:
    26                                                   left *=2
    27                                                   top *=2
    28                                                   width *=2
    29                                           
    30                                               # Create circular mask
    31         1            8      8.0      0.0      r = (width / 2)
    32         1            8      8.0      0.0      a = top+r
    33         1            7      7.0      0.0      b = left+r
    34         1          563    563.0      0.1      xx,yy=np.ogrid[-a:X-a,-b:Y-b]
    35         1        18505  18505.0      3.3      mask = xx*xx + yy*yy < r*r
    36                                               
    37                                               # Set boundaries of mask
    38         1        32144  32144.0      5.7      tempx,tempy = np.where(mask)
    39         1        92327  92327.0     16.5      y_min = min(tempy)-border
    40         1        92102  92102.0     16.4      y_max = max(tempy)+border+1
    41         1        92219  92219.0     16.4      x_min = min(tempx)-border
    42         1       125539 125539.0     22.4      x_max = max(tempx)+border+1
    43                                           
    44         1           21     21.0      0.0      x1 = x_max - x_min
    45         1           32     32.0      0.0      y1 = y_max - y_min    
    46         1          151    151.0      0.0      size1 = np.array([x1,y1], dtype='int')
    47         1           51     51.0      0.0      m1 = mask[x_min:x_max,y_min:y_max]
    48                                           
    49                                               
    50         1          250    250.0      0.0      size_path = os.path.join(os.path.dirname(path), r'size.dat')
    51         1         2764   2764.0      0.5      size1.tofile(size_path)
    52         1          216    216.0      0.0      mask_path = os.path.join(os.path.dirname(path), r'mask.dat')
    53         1        88297  88297.0     15.7      m1.tofile(mask_path)
    54                                           
    55                                           
    56         1           10     10.0      0.0      if size:
    57                                                   return mask, (x_min, x_max, y_min, y_max)
    58                                               else:
    59         1            6      6.0      0.0          return mask

