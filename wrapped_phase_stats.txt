Timer unit: 4.1058e-07 s

File: wrapped_phase.py
Function: get_phase at line 68
Total time: 11.9626 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    68                                           @profile
    69                                           def get_phase(filename, path, path_raw, path_images, mask, coord, deb):
    70        30          330     11.0      0.0      z = time.clock()
    71                                           
    72        30         2119     70.6      0.0      file_in = os.path.join(path,filename)
    73        30         1263     42.1      0.0      file_raw = os.path.join(path_raw,'raw_'+filename)
    74        30         1274     42.5      0.0      image_phase = os.path.join(path_images,'wrapped'+filename[4:11]+'bmp')
    75        30         1210     40.3      0.0      binary_phase = os.path.join(path_raw,'wrapped'+filename[4:11]+'dat')
    76        30         1199     40.0      0.0      mod_arr = os.path.join(path_raw,'mod'+filename[4:11]+'dat')
    77        30         1201     40.0      0.0      mod_image = os.path.join(path_images,'mod'+filename[4:11]+'bmp')
    78        30         1250     41.7      0.0      qual_arr = os.path.join(path_raw,'qual'+filename[4:11]+'dat')
    79        30         1209     40.3      0.0      qual_image = os.path.join(path_images,'qual'+filename[4:11]+'bmp')
    80                                           
    81                                               # Open meas file and grab dataset
    82        30          177      5.9      0.0      try:
    83        30        29960    998.7      0.1          f = File(file_in, 'r')
    84                                               except:
    85                                                   print 'Corrupt h5 file: '+filename+' ignoring'
    86                                                   return
    87        30        23821    794.0      0.1      sub = f.get(r'measurement0/frames/frame_full/data')
    88        30       322820  10760.7      1.1      data = np.array(sub,'f')
    89        30        21509    717.0      0.1      f.close()
    90                                           
    91                                               # Get phase
    92        30     24099272 803309.1     82.7      phase, modulation, intensity = calc_phase(data)
    93                                               
    94                                               # Apply mask
    95        30       365052  12168.4      1.3      phase[~mask] = 0
    96        30       397316  13243.9      1.4      intensity[~mask] = 0
    97        30       395864  13195.5      1.4      modulation[~mask] = 0
    98        30          983     32.8      0.0      phase = phase[coord[0]:coord[1],coord[2]:coord[3]]
    99                                               
   100                                               # Save phase
   101                                               #print filename
   102        30       603941  20131.4      2.1      toimage(phase).save(image_phase)
   103        30      2021901  67396.7      6.9      phase.tofile(binary_phase)
   104                                               #toimage(phase).show()
   105                                               
   106                                               #toimage(phase).show()
   107                                               #toimage(modulation).show()
   108                                               #toimage(mask).show()
   109                                           
   110        30       400157  13338.6      1.4      ave_mod = np.average(modulation[mask])
   111        30       400742  13358.1      1.4      ave_int = np.average(intensity[mask])
   112        30          450     15.0      0.0      timer = time.clock()-z
   113                                           
   114        30          503     16.8      0.0      if ave_mod < 0.6:
   115         3         9260   3086.7      0.0          print filename+' low mod:', ave_mod
   116                                               else:
   117        27        26972    999.0      0.1          sys.stdout.write('.')
   118                                               '''
   119                                               # Dump to deb
   120                                               if first:
   121                                                   X,Y = x_max-x_min, y_max-y_min
   122                                                   deb+= 'x size,'+str(X)+'\n'
   123                                                   deb+= 'y size,'+str(Y)+'\n'
   124                                                   deb+= 'number of files,'+str(len(raw_filenames))+'\n'
   125                                                   deb+= 'file, instensity, modulation, time\n'
   126                                               '''
   127        30          950     31.7      0.0      deb+= filename+','
   128        30         1589     53.0      0.0      deb+= str(ave_int)+','
   129        30          657     21.9      0.0      deb+= str(ave_mod)+','
   130        30          713     23.8      0.0      deb+= str(timer)+'\n'
   131        30          206      6.9      0.0      return deb

