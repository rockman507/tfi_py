Timer unit: 4.1058e-07 s

File: calc_phase.py
Function: calc_phase at line 4
Total time: 0.0863233 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def calc_phase (data):
     6                                           
     7                                               # Setup 9-pixels
     8         1           60     60.0      0.0      I1 = data[:-2,:-2] 
     9         1           18     18.0      0.0      I2 = data[:-2,1:-1] 
    10         1           13     13.0      0.0      I3 = data[:-2,2:] 
    11         1           13     13.0      0.0      I4 = data[1:-1,:-2] 
    12         1           13     13.0      0.0      I5 = data[1:-1,1:-1] 
    13         1           13     13.0      0.0      I6 = data[1:-1,2:] 
    14         1           13     13.0      0.0      I7 = data[2:,:-2] 
    15         1           13     13.0      0.0      I8 = data[2:,1:-1] 
    16         1           12     12.0      0.0      I9 = data[2:,2:]
    17                                           
    18                                               # Intensity and modulation stolen from Jason by Jason
    19         1        30667  30667.0     14.6      intensity = I5 + 0.5*(I2+I4+I6+I8) + 0.25*(I1+I3+I5+I7+I9)
    20                                               
    21                                               #quality = np.array(modulation > 0.0, 'b')
    22                                               
    23         1        13319  13319.0      6.3      num = 2*(I2+I8-I4-I6)+.0001 #addition to avoid division by zero
    24         1        18386  18386.0      8.7      den = 4*I5-I1-I3-I7-I9+.0001 #addition to avoid division by zero
    25                                           
    26         1        22068  22068.0     10.5      modulation = sqrt(num**2+den**2)/(2*intensity+.0001)
    27         1         3509   3509.0      1.7      modulation[modulation>1]=0
    28                                           
    29                                               # Create two masks when atan and acot need to be applied  
    30         1          100    100.0      0.0      a_mask = ones(modulation.shape, 'bool')
    31         1          117    117.0      0.1      a_mask[::2,::2]=False
    32         1          104    104.0      0.0      a_mask[1::2,1::2]=False
    33         1         5761   5761.0      2.7      tmp1 = num/den
    34         1        16222  16222.0      7.7      tmp1[a_mask] = 1/tmp1[a_mask]
    35         1        36914  36914.0     17.6      phase = arctan(tmp1)
    36                                           
    37                                               # Fix me some phase offsets
    38         1        14022  14022.0      6.7      phase[(a_mask) & (phase<0) & (num>0)] += pi
    39         1        13624  13624.0      6.5      phase[(~a_mask) & (phase<0) & (den>0)] += pi
    40         1        16701  16701.0      7.9      phase[(phase>0) & (phase<pi/2) & (num>0)] -= pi
    41         1          491    491.0      0.2      phase[:,::2] += pi
    42         1          802    802.0      0.4      phase+=pi
    43                                               #phase[phase>=pi] -= 2*pi
    44         1        10052  10052.0      4.8      phase = phase%(2*pi)
    45                                               #phase = phase-pi/2
    46                                           
    47         1         5169   5169.0      2.5      print phase.max(),phase.min()
    48                                           
    49                                               # Map phase [-2pi:2pi] -> [0,255]
    50         1           25     25.0      0.0      t2 = 255/(2*pi)
    51                                               #phase+=pi
    52         1         2013   2013.0      1.0      phase*=t2
    53                                               #t2 = 255/pi
    54                                               #phase*=t2
    55                                               #phase = array(phase,'B')
    56                                           
    57         1           13     13.0      0.0      return phase, modulation, intensity

