Timer unit: 4.1058e-07 s

File: calc_phase.py
Function: calc_phase at line 6
Total time: 7.73268 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def calc_phase (data):
     8                                           
     9                                               # Setup 9-pixels
    10       101         1789     17.7      0.0      I1 = data[:-2,:-2] 
    11       101          970      9.6      0.0      I2 = data[:-2,1:-1] 
    12       101          884      8.8      0.0      I3 = data[:-2,2:] 
    13       101          907      9.0      0.0      I4 = data[1:-1,:-2] 
    14       101          848      8.4      0.0      I5 = data[1:-1,1:-1] 
    15       101          877      8.7      0.0      I6 = data[1:-1,2:] 
    16       101          864      8.6      0.0      I7 = data[2:,:-2] 
    17       101          822      8.1      0.0      I8 = data[2:,1:-1] 
    18       101          833      8.2      0.0      I9 = data[2:,2:]
    19                                           
    20                                               # Intensity and modulation stolen from Jason by Jason
    21       101      1896622  18778.4     10.1      intensity = I5 + 0.5*(I2+I4+I6+I8) + 0.25*(I1+I3+I5+I7+I9)
    22                                               
    23                                               #quality = np.array(modulation > 0.0, 'b')
    24                                               
    25       101       843652   8353.0      4.5      num = 2*(I2+I8-I4-I6)+.0001 #addition to avoid division by zero
    26       101      1068979  10584.0      5.7      den = 4*I5-I1-I3-I7-I9+.0001 #addition to avoid division by zero
    27                                           
    28       101      1974016  19544.7     10.5      modulation = sqrt(num**2+den**2)/(2*intensity+.0001)
    29       101       373129   3694.3      2.0      modulation[modulation>1]=0
    30                                           
    31                                               # Create two masks when atan and acot need to be applied  
    32       101         5906     58.5      0.0      a_mask = zeros(modulation.shape, 'bool')
    33       101        12281    121.6      0.1      a_mask[::2,::2]=True
    34       101        11075    109.7      0.1      a_mask[1::2,1::2]=True
    35       101       624797   6186.1      3.3      tmp1 = num/den
    36       101      1870427  18519.1      9.9      tmp1[~a_mask] = 1/tmp1[~a_mask]
    37       101      3949472  39103.7     21.0      phase = arctan(tmp1)
    38                                           
    39                                               # Fix me some phase offsets
    40       101      1397957  13841.2      7.4      phase[(~a_mask) & (phase<0) & (num>0)] += pi
    41       101      1322599  13095.0      7.0      phase[(a_mask) & (phase<0) & (den>0)] += pi
    42       101      1745932  17286.5      9.3      phase[(phase>0) & (phase<pi/2) & (num>0)] -= pi
    43       101        48758    482.8      0.3      phase[:,::2] += pi
    44       101      1257877  12454.2      6.7      phase[phase>=pi] -= 2*pi
    45                                           
    46                                               # Map phase [-2pi:2pi] -> [0,255]
    47       101         1099     10.9      0.0      t2 = 255/(2*pi)
    48       101        89606    887.2      0.5      phase+=pi
    49       101        90419    895.2      0.5      phase*=t2
    50       101       239243   2368.7      1.3      phase = np.array(phase,'B')
    51                                           
    52       101          886      8.8      0.0      return phase, modulation, intensity

