Timer unit: 4.1058e-07 s

File: calc_phase.py
Function: calc_phase at line 6
Total time: 75.2231 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           @profile
     7                                           def calc_phase (data):
     8                                           
     9                                               # Setup 9-pixels
    10      1001        17173     17.2      0.0      I1 = data[:-2,:-2] 
    11      1001         9291      9.3      0.0      I2 = data[:-2,1:-1] 
    12      1001         8716      8.7      0.0      I3 = data[:-2,2:] 
    13      1001         8442      8.4      0.0      I4 = data[1:-1,:-2] 
    14      1001         8410      8.4      0.0      I5 = data[1:-1,1:-1] 
    15      1001         8327      8.3      0.0      I6 = data[1:-1,2:] 
    16      1001         8303      8.3      0.0      I7 = data[2:,:-2] 
    17      1001         8181      8.2      0.0      I8 = data[2:,1:-1] 
    18      1001         8138      8.1      0.0      I9 = data[2:,2:]
    19                                           
    20                                               # Intensity and modulation stolen from Jason by Jason
    21      1001     18813763  18795.0     10.3      intensity = I5 + 0.5*(I2+I4+I6+I8) + 0.25*(I1+I3+I5+I7+I9)
    22                                               
    23                                               #quality = np.array(modulation > 0.0, 'b')
    24                                               
    25      1001      8380955   8372.6      4.6      num = 2*(I2+I8-I4-I6)+.0001 #addition to avoid division by zero
    26      1001     10631377  10620.8      5.8      den = 4*I5-I1-I3-I7-I9+.0001 #addition to avoid division by zero
    27                                           
    28      1001     19458522  19439.1     10.6      modulation = sqrt(num**2+den**2)/(2*intensity+.0001)
    29      1001      3638928   3635.3      2.0      modulation[modulation>1]=0
    30                                           
    31                                               # Create two masks when atan and acot need to be applied  
    32      1001        90111     90.0      0.0      a_mask = ones(modulation.shape, 'bool')
    33      1001       122376    122.3      0.1      a_mask[::2,::2]=False
    34      1001       112265    112.2      0.1      a_mask[1::2,1::2]=False
    35      1001      6179715   6173.5      3.4      tmp1 = num/den
    36      1001     17059156  17042.1      9.3      tmp1[a_mask] = 1/tmp1[a_mask]
    37      1001     39107049  39068.0     21.3      phase = arctan(tmp1)
    38                                           
    39                                               # Fix me some phase offsets
    40                                               #phase[(a_mask) & (phase<0) & (num>0)] += pi
    41                                               #phase[(~a_mask) & (phase<0) & (den>0)] += pi
    42      1001     24592383  24567.8     13.4      phase[((a_mask) & (phase<0) & (num>0)) | ((~a_mask) & (phase<0) & (den>0))] += pi
    43      1001     17880348  17862.5      9.8      phase[(phase>0) & (phase<pi/2) & (num>0)] -= pi
    44      1001       513901    513.4      0.3      phase[:,::2] += pi
    45      1001     12428491  12416.1      6.8      phase[phase>=pi] -= 2*pi
    46                                           
    47                                               # Map phase [-2pi:2pi] -> [0,255]
    48      1001        10875     10.9      0.0      t2 = 255/(2*pi)
    49      1001       863822    863.0      0.5      phase+=pi
    50      1001       867452    866.6      0.5      phase*=t2
    51      1001      2366713   2364.3      1.3      phase = np.array(phase,'B')
    52                                           
    53      1001         8506      8.5      0.0      return phase, modulation, intensity

