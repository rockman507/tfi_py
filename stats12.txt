Timer unit: 4.1058e-07 s

File: calc_phase.py
Function: calc_phase at line 4
Total time: 0.0718397 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def calc_phase (data):
     6                                           
     7                                               # Setup 9-pixels
     8         1           71     71.0      0.0      I1 = data[:-2,:-2] 
     9         1           11     11.0      0.0      I2 = data[:-2,1:-1] 
    10         1            9      9.0      0.0      I3 = data[:-2,2:] 
    11         1            9      9.0      0.0      I4 = data[1:-1,:-2] 
    12         1            7      7.0      0.0      I5 = data[1:-1,1:-1] 
    13         1            7      7.0      0.0      I6 = data[1:-1,2:] 
    14         1            8      8.0      0.0      I7 = data[2:,:-2] 
    15         1            8      8.0      0.0      I8 = data[2:,1:-1] 
    16         1            8      8.0      0.0      I9 = data[2:,2:]
    17                                           
    18                                               # Intensity and modulation stolen from Jason by Jason
    19         1        17752  17752.0     10.1      intensity = I5 + 0.5*(I2+I4+I6+I8) + 0.25*(I1+I3+I5+I7+I9)
    20                                               
    21                                               #quality = np.array(modulation > 0.0, 'b')
    22                                               
    23         1         7631   7631.0      4.4      num = 2*(I2+I8-I4-I6)+.0001 #addition to avoid division by zero
    24         1         9591   9591.0      5.5      den = 4*I5-I1-I3-I7-I9+.0001 #addition to avoid division by zero
    25                                           
    26         1        17946  17946.0     10.3      modulation = sqrt(num**2+den**2)/(2*intensity+.0001)
    27         1         3485   3485.0      2.0      modulation[modulation>1]=0
    28                                           
    29                                               # Create two masks when atan and acot need to be applied  
    30         1           99     99.0      0.1      a_mask = ones(modulation.shape, 'bool')
    31         1          115    115.0      0.1      a_mask[::2,::2]=False
    32         1          109    109.0      0.1      a_mask[1::2,1::2]=False
    33         1         5756   5756.0      3.3      tmp1 = num/den
    34         1        16021  16021.0      9.2      tmp1[a_mask] = 1/tmp1[a_mask]
    35         1        36719  36719.0     21.0      phase = arctan(tmp1)
    36                                           
    37                                               # Fix me some phase offsets
    38         1        13140  13140.0      7.5      phase[(a_mask) & (phase<0) & (num>0)] += pi
    39         1        13667  13667.0      7.8      phase[(~a_mask) & (phase<0) & (den>0)] += pi
    40         1        16761  16761.0      9.6      phase[(phase>0) & (phase<pi/2) & (num>0)] -= pi
    41         1          486    486.0      0.3      phase[:,::2] += pi
    42         1        11666  11666.0      6.7      phase[phase>=pi] -= 2*pi
    43                                           
    44                                               # Map phase [-2pi:2pi] -> [0,255]
    45         1            8      8.0      0.0      t2 = 255/(2*pi)
    46         1          810    810.0      0.5      phase+=pi
    47         1          805    805.0      0.5      phase*=t2
    48         1         2259   2259.0      1.3      phase = array(phase,'B')
    49                                           
    50         1            7      7.0      0.0      return phase, modulation, intensity

