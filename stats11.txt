Timer unit: 4.1058e-07 s

File: calc_phase.py
Function: calc_phase at line 4
Total time: 75.5033 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def calc_phase (data):
     6                                           
     7                                               # Setup 9-pixels
     8      1001        16490     16.5      0.0      I1 = data[:-2,:-2] 
     9      1001         9019      9.0      0.0      I2 = data[:-2,1:-1] 
    10      1001         8557      8.5      0.0      I3 = data[:-2,2:] 
    11      1001         8421      8.4      0.0      I4 = data[1:-1,:-2] 
    12      1001         8108      8.1      0.0      I5 = data[1:-1,1:-1] 
    13      1001         8205      8.2      0.0      I6 = data[1:-1,2:] 
    14      1001         8175      8.2      0.0      I7 = data[2:,:-2] 
    15      1001         7919      7.9      0.0      I8 = data[2:,1:-1] 
    16      1001         7757      7.7      0.0      I9 = data[2:,2:]
    17                                           
    18                                               # Intensity and modulation stolen from Jason by Jason
    19      1001     18278283  18260.0      9.9      intensity = I5 + 0.5*(I2+I4+I6+I8) + 0.25*(I1+I3+I5+I7+I9)
    20                                               
    21                                               #quality = np.array(modulation > 0.0, 'b')
    22                                               
    23      1001      8023424   8015.4      4.4      num = 2*(I2+I8-I4-I6)+.0001 #addition to avoid division by zero
    24      1001     10267566  10257.3      5.6      den = 4*I5-I1-I3-I7-I9+.0001 #addition to avoid division by zero
    25                                           
    26      1001     19230798  19211.6     10.5      modulation = sqrt(num**2+den**2)/(2*intensity+.0001)
    27      1001      3606272   3602.7      2.0      modulation[modulation>1]=0
    28                                           
    29                                               # Create two masks when atan and acot need to be applied  
    30      1001        89432     89.3      0.0      a_mask = ones(modulation.shape, 'bool')
    31      1001       121146    121.0      0.1      a_mask[::2,::2]=False
    32      1001       110966    110.9      0.1      a_mask[1::2,1::2]=False
    33      1001      6128216   6122.1      3.3      tmp1 = num/den
    34      1001     16818848  16802.0      9.1      tmp1[a_mask] = 1/tmp1[a_mask]
    35      1001     38701314  38662.7     21.0      phase = arctan(tmp1)
    36                                           
    37                                               # Fix me some phase offsets
    38      1001     13813319  13799.5      7.5      phase[(a_mask) & (phase<0) & (num>0)] += pi
    39      1001     14291276  14277.0      7.8      phase[(~a_mask) & (phase<0) & (den>0)] += pi
    40      1001     17589949  17572.4      9.6      phase[(phase>0) & (phase<pi/2) & (num>0)] -= pi
    41      1001       495096    494.6      0.3      phase[:,::2] += pi
    42      1001     12218441  12206.2      6.6      phase[phase>=pi] -= 2*pi
    43                                           
    44                                               # Map phase [-2pi:2pi] -> [0,255]
    45      1001        10638     10.6      0.0      t2 = 255/(2*pi)
    46      1001       851273    850.4      0.5      phase+=pi
    47      1001       850979    850.1      0.5      phase*=t2
    48      1001      2305859   2303.6      1.3      phase = array(phase,'B')
    49                                           
    50      1001         8267      8.3      0.0      return phase, modulation, intensity

